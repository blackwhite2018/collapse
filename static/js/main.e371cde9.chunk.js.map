{"version":3,"sources":["components/Collapse/Collapse.jsx","components/Paragraph/Paragraph.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Collapse","collapseLable","expandedLable","children","useState","isExpanded","setExpanded","className","type","onClick","evt","prevValue","defaultProps","expandedLabel","Paragraph","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAIMA,G,KAAW,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,SAAgB,EAC5BC,oBAAS,GADmB,mBACvDC,EADuD,KAC3CC,EAD2C,KAO9D,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,oBACX,4BAAQC,KAAK,SAASD,UAAU,mBAAmBE,QAPlC,SAAAC,GACzBJ,GAAY,SAAAK,GAAS,OAAKA,OAOZN,EAAaJ,EAAgBC,IAGvC,yBAAKK,UAAS,yBAAsBF,EAAa,GAAK,yBAChDF,MAMlBH,EAASY,aAAe,CACpBX,cAAe,yDACfY,cAAe,wCAUJb,QC/BAc,EAJG,SAAC,GAAD,IAAGX,EAAH,EAAGA,SAAH,OACd,2BAAKA,ICgBMY,EAfH,kBACX,oCACA,kBAAC,EAAD,CACCd,cAAc,yDACdC,cAAc,wCAEd,kBAAC,EAAD,6MCEkBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e371cde9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Collapse.css';\r\n\r\nconst Collapse = ({ collapseLable, expandedLable, children  }) => {\r\n    const [isExpanded, setExpanded] = useState(false);\r\n\r\n    const handleExpandedChange = evt => {\r\n        setExpanded(prevValue => !prevValue);\r\n    };\r\n\r\n    return (\r\n        <div className=\"collapse\">\r\n            <div className=\"collapse__header\">\r\n                <button type=\"button\" className=\"btn btn-collapse\" onClick={ handleExpandedChange }>\r\n                    { isExpanded ? collapseLable : expandedLable }\r\n                </button>\r\n            </div>\r\n            <div className={ `collapse__body ${ isExpanded ? '' : 'collapse__body--show' }` }>\r\n                { children }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nCollapse.defaultProps = {\r\n    collapseLable: 'Подробнее',\r\n    expandedLabel: 'Скрыть'\r\n};\r\n\r\nCollapse.propTypes = {\r\n    props: PropTypes.shape({\r\n        collapseLable: PropTypes.string,\r\n        expandedLable: PropTypes.string\r\n    })\r\n};\r\n\r\nexport default Collapse;\r\n\r\n","import React from 'react';\r\n\r\nconst Paragraph = ({ children }) => (\r\n    <p>{ children }</p>\r\n);\r\n\r\nexport default Paragraph;\r\n\r\n","import React from 'react';\nimport Collapse from './components/Collapse/Collapse';\nimport Paragraph from './components/Paragraph/Paragraph';\n\nconst App = () => (\n\t<>\n\t<Collapse\n\t\tcollapseLable='Подробнее'\n\t\texpandedLable='Скрыть'\n\t>\n\t\t<Paragraph>\n\t\t\tAnim pariatur cliche reprehenderit, enim eiusmod high life accusamus\n\t\t\tterry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer\n\t\t\tlabore wes anderson cred nesciunt sapiente ea proident.\n    \t</Paragraph>\n\t</Collapse>\n\t</>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}